[{"/home/ps/MyData/sites/oceanbed2.0/frontend/src/index.tsx":"1","/home/ps/MyData/sites/oceanbed2.0/frontend/src/reportWebVitals.ts":"2","/home/ps/MyData/sites/oceanbed2.0/frontend/src/serviceWorkerRegistration.ts":"3","/home/ps/MyData/sites/oceanbed2.0/frontend/src/App.tsx":"4","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Footer.tsx":"5","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/DarkModeToggle.tsx":"6","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Home.tsx":"7","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Login.tsx":"8","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/ProtectedRoute.tsx":"9","/home/ps/MyData/sites/oceanbed2.0/frontend/src/types/HomeTypes.ts":"10","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/SignUp.tsx":"11","/home/ps/MyData/sites/oceanbed2.0/frontend/src/services/graphQLService.ts":"12","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Dashboard.tsx":"13","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Navigation.tsx":"14","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/SidePanel.tsx":"15","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Posts.tsx":"16","/home/ps/MyData/sites/oceanbed2.0/frontend/src/types/PostTypes.ts":"17","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Report.tsx":"18","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Delete.tsx":"19","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Like.tsx":"20","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/InstallPWA.tsx":"21"},{"size":816,"mtime":1610721880534,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1608842142782,"results":"24","hashOfConfig":"23"},{"size":5256,"mtime":1608842142782,"results":"25","hashOfConfig":"23"},{"size":756,"mtime":1610883770933,"results":"26","hashOfConfig":"23"},{"size":3939,"mtime":1611271603385,"results":"27","hashOfConfig":"23"},{"size":1698,"mtime":1610908879938,"results":"28","hashOfConfig":"23"},{"size":3461,"mtime":1611307476300,"results":"29","hashOfConfig":"23"},{"size":6065,"mtime":1611176307147,"results":"30","hashOfConfig":"23"},{"size":534,"mtime":1611157065850,"results":"31","hashOfConfig":"23"},{"size":73,"mtime":1610806249859,"results":"32","hashOfConfig":"23"},{"size":8015,"mtime":1611265760457,"results":"33","hashOfConfig":"23"},{"size":942,"mtime":1610899972988,"results":"34","hashOfConfig":"23"},{"size":1836,"mtime":1611265224341,"results":"35","hashOfConfig":"23"},{"size":3325,"mtime":1611310186162,"results":"36","hashOfConfig":"23"},{"size":21659,"mtime":1611311080015,"results":"37","hashOfConfig":"23"},{"size":4661,"mtime":1611274748979,"results":"38","hashOfConfig":"23"},{"size":126,"mtime":1611156812402,"results":"39","hashOfConfig":"40"},{"size":4864,"mtime":1611266094412,"results":"41","hashOfConfig":"23"},{"size":4532,"mtime":1611228349670,"results":"42","hashOfConfig":"23"},{"size":2316,"mtime":1611273597019,"results":"43","hashOfConfig":"23"},{"size":1155,"mtime":1611310355986,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1lw1fiw",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r6f0vh",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"/home/ps/MyData/sites/oceanbed2.0/frontend/src/index.tsx",[],["91","92"],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/reportWebVitals.ts",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/serviceWorkerRegistration.ts",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/App.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Footer.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/DarkModeToggle.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Home.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Login.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/ProtectedRoute.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/types/HomeTypes.ts",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/SignUp.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/services/graphQLService.ts",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Dashboard.tsx",["93"],"import { useState, useEffect, useRef } from \"react\";\nimport Navigation from \"./Navigation\";\nimport SidePanel from \"./SidePanel\";\nimport Posts, { RefObject } from \"./Posts\";\nimport Footer from \"./Footer\";\nimport { Post } from \"../types/PostTypes\";\n\nfunction About() {\n  const [isOpen, setIsOpen] = useState(true);\n  const [mobileMenuIsOpen, setMobileMenuIsOpen] = useState(false);\n  const [selectedCountry, setselectedCountry] = useState(\"\");\n\n  const postsRef = useRef<RefObject>(null);\n\n  const onCountryChange = (country: string) => {\n    setselectedCountry(country);\n    postsRef.current && postsRef.current.selectCountry(country);\n  };\n\n  const addPost = (post: Post): void => {\n    postsRef.current && postsRef.current.appendNewPost(post);\n  };\n\n  return (\n    <div>\n      <div\n        className={\n          isOpen\n            ? \"fixed inset-0 overflow-hidden bg-gray-200 dark:bg-gray-800 shadow\"\n            : \"h-screen\"\n        }\n      >\n        <div\n          className={\n            isOpen ? \"absolute inset-0 overflow-hidden h-full\" : \"h-full\"\n          }\n        >\n          <div\n            className={\n              isOpen\n                ? \"flex flex-col absolute inset-0 overflow-hidden h-full\"\n                : \"flex flex-col h-full\"\n            }\n          >\n            <Navigation\n              mobileMenuIsOpen={mobileMenuIsOpen}\n              selectedCountry={selectedCountry}\n              setMobileMenuIsOpen={setMobileMenuIsOpen}\n              onCountryChange={onCountryChange}\n              setIsOpen={setIsOpen}\n            />\n            <Posts ref={postsRef} />\n            <Footer />\n            <SidePanel\n              isOpen={isOpen}\n              setIsOpen={setIsOpen}\n              addPost={addPost}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default About;\n","/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Navigation.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/SidePanel.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Posts.tsx",["94","95"],"import { gql } from \"graphql-request\";\nimport React, {\n  forwardRef,\n  Ref,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from \"react\";\nimport { requestGraphQL } from \"../services/graphQLService\";\nimport { Post } from \"../types/PostTypes\";\nimport Report from \"./Report\";\nimport Delete from \"./Delete\";\nimport Like from \"./Like\";\n\ninterface PostsProps {}\n\nexport interface RefObject {\n  selectCountry: (country: string) => void;\n  appendNewPost: (post: Post) => void;\n}\n\nconst Posts = forwardRef((_props: PostsProps, ref: Ref<RefObject>) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    loadAllPosts();\n  }, []);\n\n  useImperativeHandle(ref, () => ({\n    selectCountry(country: string) {\n      loadByCountry(country);\n    },\n    appendNewPost(post: Post) {\n      setPosts([post, ...posts]);\n    },\n  }));\n\n  const loadByCountry = (country: string) => {\n    const query = gql`\n      query getPostsByCountry {\n        get_posts_by_country(input: { country: \"${country}\" }) {\n          data {\n            _id\n            content\n            country\n            likes\n            user {\n              _id\n            }\n          }\n        }\n      }\n    `;\n    sendQuery(query);\n  };\n\n  const loadAllPosts = () => {\n    const query = gql`\n      query getAllPosts {\n        get_all_posts {\n          data {\n            _id\n            content\n            country\n            likes\n            user {\n              _id\n            }\n          }\n        }\n      }\n    `;\n    sendQuery(query);\n  };\n\n  const loadPostByUser = (userId: string) => {\n    const query = gql`\n      query getPostsByUser {\n        get_posts_by_user(input: { userId: \"${userId}\" }) {\n          data {\n            _id\n            content\n            country\n            likes\n            user {\n              _id\n            }\n          }\n        }\n      }\n    `;\n    sendQuery(query);\n  };\n\n  const onPostDelete = (id: string) => {\n    setPosts(\n      posts.filter((post) => {\n        return post._id !== id;\n      })\n    );\n  };\n\n  const setLikes = (postId: string, likes: number) => {\n    const query = gql`\n      mutation addLikes {\n        add_likes(input: { postId: \"${postId}\", likes: ${likes} }) {\n          likes\n        }\n      }\n    `;\n    requestGraphQL(true, query).then(() => {\n      setPosts(\n        posts.map((post) => {\n          if (postId === post._id) {\n            return {\n              ...post,\n              likes: likes,\n            };\n          }\n          return post;\n        })\n      );\n    });\n  };\n\n  const sendQuery = (query: string) => {\n    requestGraphQL(true, query)\n      .then((data: any) => {\n        const posts: [Post] =\n          data.get_all_posts?.data ||\n          data.get_posts_by_user?.data ||\n          data.get_posts_by_country?.data;\n        const reversedPosts = posts.reverse();\n        setPosts(reversedPosts);\n        localStorage.setItem(\"posts\", JSON.stringify(reversedPosts));\n      })\n      .catch((error) => {\n        const cache: [Post] = JSON.parse(\n          localStorage.getItem(\"posts\") as string\n        );\n        setPosts(cache);\n        console.log(\"error\", error);\n      });\n  };\n\n  const renderPosts = () => {\n    const userId = localStorage.getItem(\"user\");\n    return posts.map((post, key) => {\n      return (\n        <div\n          key={`${key}${post._id}`}\n          className=\"mt-5 max-w-screen-lg mx-auto bg-white dark:bg-gray-800 shadow-lg rounded-lg overflow-hidden\"\n        >\n          <div className=\"px-4 py-2\">\n            <h1 className=\"text-gray-800 dark:text-white text-lg whitespace-pre-line\">\n              {post.content}\n            </h1>\n            <a\n              className=\"text-gray-600 dark:text-gray-400 text-sm mt-1\"\n              onClick={() => loadPostByUser(post.user._id)}\n              href=\"#\"\n            >\n              Visit Profile\n            </a>\n          </div>\n\n          <div className=\"flex items-center justify-between px-4 py-2 bg-gray-500 dark:bg-gray-900\">\n            <Like\n              postId={post._id}\n              likes={post.likes}\n              setLikes={setLikes}\n              key={post._id}\n            />{\" \"}\n            {userId === post.user._id ? (\n              <Delete\n                postId={post._id}\n                id={post._id}\n                onPostDelete={onPostDelete}\n                key={`${post._id}${key}`}\n              />\n            ) : (\n              <Report postId={post._id} key={key} />\n            )}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className=\"flex-grow mt-12 py-5 bg-gray-200 dark:bg-gray-800\">\n      {renderPosts()}\n    </div>\n  );\n});\n\nexport default Posts;\n","/home/ps/MyData/sites/oceanbed2.0/frontend/src/types/PostTypes.ts",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Report.tsx",[],["96","97"],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Delete.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/Like.tsx",[],"/home/ps/MyData/sites/oceanbed2.0/frontend/src/components/InstallPWA.tsx",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":20,"nodeType":"104","messageId":"105","endLine":1,"endColumn":29},{"ruleId":"106","severity":1,"message":"107","line":27,"column":6,"nodeType":"108","endLine":27,"endColumn":8,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":158,"column":13,"nodeType":"112","endLine":162,"endColumn":14},{"ruleId":"98","replacedBy":"113"},{"ruleId":"100","replacedBy":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadAllPosts'. Either include it or remove the dependency array.","ArrayExpression",["117"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["115"],["116"],"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [loadAllPosts]",{"range":"120","text":"121"},[642,644],"[loadAllPosts]"]